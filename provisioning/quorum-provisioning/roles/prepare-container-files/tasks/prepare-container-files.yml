- name: Check if operating system is Ubuntu
  fail: msg="Please use Ubuntu as operating system."
  when: ansible_distribution != 'Ubuntu'
- name: Replace enodes
  local_action: shell /bin/sed -i '0,/0.0.0.0:30303/s/0.0.0.0:30303/{{ hostvars[inventory_hostname]['serverip'] }}:{{ P2P_START_PORT + groups['node'].index(inventory_hostname) * 100 + my_idx }}/' {{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/static-nodes.json warn="false"
  loop: "{% if additional_nodes_per_container[groups['node'].index(inventory_hostname)].number | int is defined and additional_nodes_per_container[groups['node'].index(inventory_hostname)].number | int > 0 %}{{ range(0, additional_nodes_per_container[groups['node'].index(inventory_hostname)].number | int)|list }}{% else %}{{ range(0, 0)|list }}{% endif %}"
  loop_control:
    loop_var: item
    index_var: my_idx
  when: CONSENSUS_NAME == 'istanbulbft'
  throttle: 1
  tags:
  - bm-set
- name: Get account keys
  shell: "echo '/bin/bash getKeys.sh' | docker exec -i {{ inventory_hostname }} /bin/bash -"
  register: keys
  when: CONDITION_FOR_KEYS
  throttle: 1
  tags:
  - bm-set
- name: Output keys
  debug:
    msg: "{{ keys.stdout_lines | list }}"
  register: keys_content
  when: CONDITION_FOR_KEYS
  throttle: 1
  tags:
  - bm-set
- name: "Set epoch in genesis file (istanbulbft)"
  lineinfile:
    line: "            \"epoch\"{{ \":\" }} {{ EPOCH }},"
    regexp: "^ {12}\"epoch\"{{ \":\" }} 30000,"
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/genesis.json" 
  when: hostvars[inventory_hostname]['istanbulinitiator'] is defined and hostvars[inventory_hostname]['istanbulinitiator'] | bool and CONSENSUS_NAME == 'istanbulbft'
  tags:
  - bm-set
- name: "Set policy in genesis file (istanbulbft)"
  lineinfile:
    line: "            \"policy\"{{ \":\" }} {{ ISTANBUL_POLICY }},"
    regexp: "^ {12}\"policy\"{{ \":\" }} 0,"
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/genesis.json" 
  when: hostvars[inventory_hostname]['istanbulinitiator'] is defined and hostvars[inventory_hostname]['istanbulinitiator'] | bool and CONSENSUS_NAME == 'istanbulbft'
  tags:
  - bm-set
- name: "Set txnSizeLimit in genesis file (istanbulbft)"
  lineinfile:
    line: "        \"txnSizeLimit\"{{ \":\" }} {{ TX_SIZE_LIMIT }},"
    regexp: "^ {8}\"txnSizeLimit\"{{ \":\" }} 64,"
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/genesis.json" 
  when: hostvars[inventory_hostname]['istanbulinitiator'] is defined and hostvars[inventory_hostname]['istanbulinitiator'] | bool and CONSENSUS_NAME == 'istanbulbft'
  tags:
  - bm-set
- name: "Set ceil2Nby3Block in genesis file (istanbulbft)"
  lineinfile:
    line: "            \"ceil2Nby3Block\"{{ \":\" }} {{ ISTANBUL_CEIL_ALGORITHM }}"
    regexp: "^ {12}\"ceil2Nby3Block\"{{ \":\" }} 0"
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/genesis.json" 
  when: hostvars[inventory_hostname]['istanbulinitiator'] is defined and hostvars[inventory_hostname]['istanbulinitiator'] | bool and CONSENSUS_NAME == 'istanbulbft'
  tags:
  - bm-set
- name: "Replace initial funds in genesis file (istanbulbft)"
  replace: 
    replace: "            \"balance\"{{ \":\" }}\"{{ INITIAL_FUNDS }}\""
    regexp: "^ {12}\"balance\"{{ \":\" }} \"0x446c3b15f9926687d2c40534fdb564000000000000\""
    path: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/genesis.json" 
  when: hostvars[inventory_hostname]['istanbulinitiator'] is defined and hostvars[inventory_hostname]['istanbulinitiator'] | bool and CONSENSUS_NAME == 'istanbulbft'
  tags:
  - bm-set
- name: "Add initial funds to accounts (istanbulbft)"
  lineinfile:
    firstmatch: "yes"
    line: "\"{{ item }}\":{\"balance\"{{ \":\" }}\"{{ INITIAL_FUNDS }}\"},"
    insertafter: "    \"alloc\""
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/genesis.json" 
  loop: "{{ keys_content.msg }}"
  loop_control:
    loop_var: item
    index_var: my_idx
  when: hostvars[inventory_hostname]['istanbulinitiator'] is defined and hostvars[inventory_hostname]['istanbulinitiator'] | bool and NUMBER_OF_VALIDATORS_ISTANBUL > 0 and CONSENSUS_NAME == 'istanbulbft'
  throttle: 1
  tags:
  - bm-set
- name: Execute bootnode --genkey | Number {{ numberOfNodes.results[groups['node'].index(inventory_hostname)].item.number | int }}
  shell: "echo '{{ BUILD_PATH }}/bootnode --genkey=/nodes/node-{{ item }}/nodekey' | docker exec -i {{ inventory_hostname }} /bin/bash -"
  loop: "{% if numberOfNodes.results[groups['node'].index(inventory_hostname)].item.number | int is defined and numberOfNodes.results[groups['node'].index(inventory_hostname)].item.number | int > 0 %}{{ range(0, numberOfNodes.results[groups['node'].index(inventory_hostname)].item.number | int)|list }}{% else %}{{ range(0, 0)|list }}{% endif %}"
  when: CONSENSUS_NAME == "raft"
  tags:
  - bm-set
- name: Execute bootnode --nodekey | Number {{ numberOfNodes.results[groups['node'].index(inventory_hostname)].item.number | int }}
  shell: "echo '{{ BUILD_PATH }}/bootnode --nodekey=/nodes/node-{{ item }}/nodekey --writeaddress > /nodes/node-{{ item }}/enode' | docker exec -i {{ inventory_hostname }} /bin/bash -"
  loop: "{% if numberOfNodes.results[groups['node'].index(inventory_hostname)].item.number | int is defined and numberOfNodes.results[groups['node'].index(inventory_hostname)].item.number | int > 0 %}{{ range(0, numberOfNodes.results[groups['node'].index(inventory_hostname)].item.number | int)|list }}{% else %}{{ range(0, 0)|list }}{% endif %}"
  when: CONSENSUS_NAME == "raft"
  tags:
  - bm-set
- name: Get enodes from {{ inventory_hostname }}
  shell: "echo 'cat /nodes/node-*/enode' | docker exec -i {{ inventory_hostname }} /bin/bash -"
  register: enodes
  when: CONSENSUS_NAME == "raft"
  tags:
  - bm-set
- name: Output enodes
  debug:
    msg: "{{ enodes.stdout_lines }}"
  register: enodesLines
  when: CONSENSUS_NAME == "raft"
  tags:
  - bm-set
- name: "Output enode lines"
  debug:
    msg: "{{ enodesLines.msg }}"
  register: enodesToFill
  when: CONSENSUS_NAME == "raft"
  tags:
  - bm-set
- name: Insert enodes
  local_action: lineinfile line="\"enode://{{ item }}@{{ hostvars[inventory_hostname]['serverip'] }}:{{ P2P_START_PORT + groups['node'].index(inventory_hostname) * 100 + my_idx }}?discport=0&raftport={{ CONSENSUS_START_PORT + groups['node'].index(inventory_hostname) * 100 + my_idx }}\",\n\n" insertbefore="]" dest="{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/enodes.json"
  loop: "{{ enodesToFill.msg | default([]) }}"
  loop_control:
    loop_var: item
    index_var: my_idx
  when: CONSENSUS_NAME == "raft"
  throttle: 1
  tags:
  - bm-set
- name: Delete additional keys
  local_action: shell /bin/sed -i '0,/^.*{{ hostvars[inventory_hostname]['serverip'] }}.*/{/^.*{{ hostvars[inventory_hostname]['serverip'] }}.*/d}' {{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/enodes.json warn="false"
  loop: "{% if additional_nodes_per_container[groups['node'].index(inventory_hostname)].nodes_to_remove_from_enodes | int is defined and additional_nodes_per_container[groups['node'].index(inventory_hostname)].nodes_to_remove_from_enodes | int > 0 %}{{ range(0, additional_nodes_per_container[groups['node'].index(inventory_hostname)].nodes_to_remove_from_enodes | int)|list }}{% else %}{{ range(0, 0)|list }}{% endif %}"
  when: CONSENSUS_NAME == "raft"
  throttle: 1
  tags:
  - bm-set
