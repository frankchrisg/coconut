- name: Check if operating system is Ubuntu
  fail: msg="Please use Ubuntu as operating system."
  when: ansible_distribution != 'Ubuntu'
- name: Copy the docker compose files
  copy:
    src: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_compose.yaml"
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_compose.yaml"
  tags:
  - bm-set
- name: Copy start script
  copy:
    src: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_startScript.sh"
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_startScript.sh"
  tags:
  - bm-set
- name: Copy faucet script
  copy:
    src: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_faucet_startScript.sh"
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_faucet_startScript.sh"
  when: hostvars[inventory_hostname]['faucet'] is defined and hostvars[inventory_hostname]['faucet'] | bool
  tags:
  - bm-set

- name: Delete genesis directory
  file:
    state: absent
    path: "{{ LEDGER_PATH }}/"
  become: true
  when: hostvars[inventory_hostname]['genesis'] is defined and hostvars[inventory_hostname]['genesis'] | bool
  tags:
  - bm-set
- name: Delete directory for validator
  file:
    state: absent
    path: "{{ LEDGER_PATH_BASE }}/validator-{{ groups['node'].index(inventory_hostname) }}"
  become: true
  when: hostvars[inventory_hostname]['genesis'] is not defined or not hostvars[inventory_hostname]['genesis'] | bool
  tags:
  - bm-set

- name: Copy genesis directory
  copy:
    src: "{{ LEDGER_PATH }}/"
    dest: "{{ LEDGER_PATH }}/"
  when: hostvars[inventory_hostname]['genesis'] is defined and hostvars[inventory_hostname]['genesis'] | bool
  tags:
  - bm-set

- name: Create directory for validator
  file:
    path: "{{ LEDGER_PATH_BASE }}/validator-{{ groups['node'].index(inventory_hostname) }}"
    state: directory
  when: hostvars[inventory_hostname]['genesis'] is not defined or not hostvars[inventory_hostname]['genesis'] | bool
  tags:
  - bm-set
- name: Copy genesis file
  copy:
    src: "{{ LEDGER_PATH }}/genesis.bin"
    dest: "{{ LEDGER_PATH_BASE }}/validator-{{ groups['node'].index(inventory_hostname) }}/genesis.bin"
    force: true
  when: hostvars[inventory_hostname]['genesis'] is not defined or not hostvars[inventory_hostname]['genesis'] | bool
  tags:
  - bm-set

- name: Copy created accounts
  copy:
    src: "{{ KEY_PATH }}/validator-0-{{ item }}-keypair.json"
    dest: "{{ KEY_PATH }}/validator-0-{{ item }}-keypair.json"
  loop: "{{ ['validator', 'vote', 'stake'] | flatten(1) }}"
  when: hostvars[inventory_hostname]['genesis'] is defined and hostvars[inventory_hostname]['genesis'] | bool
  tags:
  - bm-set
- name: Run account creation command
  shell: "{{ LOCAL_SOLANA_PATH }}/{{ BUILD_PATH }}/solana-keygen new -o {{ KEY_PATH }}/validator-{{ groups['node'].index(inventory_hostname) }}-{{ item }}-keypair.json --force --no-bip39-passphrase"
  register: account_output
  loop: "{{ ['validator', 'vote', 'stake'] | flatten(1) }}"
  when: hostvars[inventory_hostname]['genesis'] is not defined or not hostvars[inventory_hostname]['genesis'] | bool
  tags:
  - bm-set

- name: Find files on remote machine (Nodes)
  find:
    paths: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}"
    patterns: "{{ inventory_hostname }}*.yaml"
  register: output
  tags:
  - bm-set
#- name: Delete existing keys
#  file:
#    path: "{{ KEY_PATH }}/validator-{{ groups['node'].index(inventory_hostname) }}-{{ item }}-keypair.json"
#    state: absent
#  loop: "{{ ['validator', 'vote', 'stake'] | flatten(1) }}"
#  tags:
#  - bm-set

#- name: Create faucet.sh
#  template:
#    src: "{{ MAIN_CONFIG_PATH }}/faucet.j2"
#    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_faucet.sh"
#  when: hostvars[inventory_hostname]['faucet'] is defined and hostvars[inventory_hostname]['faucet'] | bool
#  tags:
#  - bm-set
#- name: Create telegraf.conf
#  template:
#    src: "{{ MAIN_CONFIG_PATH }}/telegraf-container.j2"
#    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_telegraf.conf"
#  tags:
#  - bm-set
- name: Create telegraf.conf
  template:
    src: "{{ MAIN_CONFIG_PATH }}/telegraf-container.j2"
    dest: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}/{{ inventory_hostname }}_telegraf.conf"
  tags:
  - bm-set
- name: Stop node containers
  docker_compose:
    project_src: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}"
    files: "{{ item.path | basename }}"
    remove_volumes: yes
    state: absent
  loop: "{{ output.files|flatten(levels=1) }}"
  throttle: 1
  tags:
  - bm-rem
- name: Run node containers
  docker_compose:
    project_src: "{{ NODE_CONFIGURATION_PATH_AND_DOCKER_COMPOSE_PATH }}"
    files: "{{ item.path | basename }}"
    recreate: always
  loop: "{{ output.files|flatten(levels=1) }}"
  throttle: 1
  tags:
  - bm-run
