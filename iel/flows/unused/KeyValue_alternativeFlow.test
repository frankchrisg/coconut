package com.template.flows;

import co.paralleluniverse.fibers.Suspendable;
import com.template.contracts.KeyValueContract;
import com.template.contracts.KeyValueGetContract;
import com.template.states.KeyValueGetState;
import com.template.states.KeyValueState;
import net.corda.core.contracts.Command;
import net.corda.core.contracts.StateAndRef;
import net.corda.core.contracts.StateRef;
import net.corda.core.contracts.TransactionResolutionException;
import net.corda.core.flows.*;
import net.corda.core.identity.Party;
import net.corda.core.transactions.SignedTransaction;
import net.corda.core.transactions.TransactionBuilder;
import net.corda.core.utilities.ProgressTracker;

import java.security.PublicKey;
import java.util.ArrayList;
import java.util.List;

@InitiatingFlow
@StartableByRPC
public class KeyValueFlow_alternative extends FlowLogic<Void> {

    private final String[] args;
    private final String function;
    private StateRef stateRef;
    private List<StateRef> stateRefList;
    private Party notary;
    private List<Party> counterParties;

    private ProgressTracker.Step get;
    private ProgressTracker.Step set;
    private ProgressTracker progressTracker;

    public KeyValueFlow_alternative(final String functionConstructor, final List<String> args,
                                    final Party notaryConstructor,
                                    final List<Party> counterPartiesConstructor,
                                    final StateRef stateRefConstructor,
                                    final List<StateRef> stateRefConstructorList) {

        if (stateRefConstructor != null) {
            stateRef = stateRefConstructor;
        }

        if (stateRefConstructorList != null) {
            stateRefList = stateRefConstructorList;
        }

        if (notaryConstructor != null) {
            notary = notaryConstructor;
        }
        if (counterPartiesConstructor != null) {
            counterParties = counterPartiesConstructor;
        }

        function = functionConstructor;

        this.args = args.toArray(new String[0]);

        String signature = this.args[this.args.length - 1];

        if ("Get".equals(function)) {
            get = new ProgressTracker.Step("keyValue/get " + signature);
            progressTracker = new ProgressTracker(get);
        } else if ("Set".equals(function)) {
            set = new ProgressTracker.Step("keyValue/set " + signature);
            progressTracker = new ProgressTracker(set);
        }
    }

    @Override
    public ProgressTracker getProgressTracker() {
        return this.progressTracker;
    }

    @Suspendable
    public void get(String[] args) throws FlowException {
        if (args.length != 3) {
            throw new FlowException("Call to Get must have 3 parameters");
        }

        List<StateAndRef<KeyValueState>> states = new ArrayList<>();
        stateRefList.forEach(stateRef -> {
            try {
                states.add(getServiceHub().toStateAndRef(stateRef));
            } catch (TransactionResolutionException ignored) {

            }
        });

        //String value = states.filter(state -> args[0].equals(state.getState().getData().getKey())).findAny().map(state -> new String(state.getState().getData().getValue())).orElse("");

                String value = "";
                for (final StateAndRef<KeyValueState> state : states) {
                    if (args[0].equals(state.getState().getData().getKey())) {
                        value = new String(state.getState().getData().getValue());
                        break;
                    }
                }

        boolean keepTransaction = Boolean.parseBoolean(args[1]);
        if (keepTransaction) {
            TransactionBuilder txBuilder = new TransactionBuilder(notary);

            KeyValueGetState outputState = new KeyValueGetState(getOurIdentity(), counterParties);
            txBuilder.addOutputState(outputState);
            List<PublicKey> requiredSigners = new ArrayList<>();
            counterParties.forEach(party -> requiredSigners.add(party.getOwningKey()));
            Command<KeyValueGetContract.Get> command = new Command<>(new KeyValueGetContract.Get(), requiredSigners);
            txBuilder.addCommand(command);

            SignedTransaction signedTx = getServiceHub().signInitialTransaction(txBuilder);
            List<FlowSession> sessionList = new ArrayList<>();
            counterParties.forEach(party -> sessionList.add(initiateFlow(party)));

            SignedTransaction fullySignedTx;
            try {
                fullySignedTx = subFlow(new CollectSignaturesFlow(
                        signedTx, sessionList, CollectSignaturesFlow.tracker()));
                subFlow(new FinalityFlow(fullySignedTx, sessionList));
            } catch (FlowException ex) {
                getLogger().error("Error while handling flow " + ex.getMessage());
                throw new FlowException("Error while handling flow " + this.getRunId() + " " + ex.getMessage());
            }
        }

        progressTracker.setCurrentStep(get);

    }

    @Suspendable
    private void set(String[] args) throws FlowException {
        if (args.length != 3) {
            throw new FlowException("Call to Set must have 3 parameters");
        }

        String key = args[0];
        byte[] value = args[1].getBytes();

        TransactionBuilder txBuilder = new TransactionBuilder(notary);

        KeyValueState outputState = new KeyValueState(getOurIdentity(), counterParties, key, value);

        try {
            StateAndRef<KeyValueState> byKey = getServiceHub().toStateAndRef(stateRef);
            txBuilder.addInputState(byKey);
        } catch (TransactionResolutionException ignored) {

        }

        txBuilder.addOutputState(outputState);
        List<PublicKey> requiredSigners = new ArrayList<>();
        counterParties.forEach(party -> requiredSigners.add(party.getOwningKey()));
        Command<KeyValueContract.Set> command = new Command<>(new KeyValueContract.Set(), requiredSigners);
        txBuilder.addCommand(command);

        SignedTransaction signedTx = getServiceHub().signInitialTransaction(txBuilder);
        List<FlowSession> sessionList = new ArrayList<>();
        counterParties.forEach(party -> sessionList.add(initiateFlow(party)));

        SignedTransaction fullySignedTx;
        try {
            fullySignedTx = subFlow(new CollectSignaturesFlow(
                    signedTx, sessionList, CollectSignaturesFlow.tracker()));
            subFlow(new FinalityFlow(fullySignedTx, sessionList));
        } catch (FlowException ex) {
            getLogger().error("Error while handling flow" + ex.getMessage());
            throw new FlowException("Error while handling flow " + this.getRunId() + " " + ex.getMessage());
        }

        progressTracker.setCurrentStep(set);
    }

    @Suspendable
    @Override
    public Void call() throws FlowException {

        if ("Get".equals(function)) {
            get(args);
            return null;
        }
        if ("Set".equals(function)) {
            set(args);
            return null;
        }

        throw new FlowException("Not yet implemented function called");

    }
}