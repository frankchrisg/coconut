package com.template.flows;

import co.paralleluniverse.fibers.Suspendable;
import com.template.contracts.DoNothingContract;
import com.template.states.DoNothingState;
import net.corda.core.contracts.Command;
import net.corda.core.flows.*;
import net.corda.core.identity.Party;
import net.corda.core.transactions.SignedTransaction;
import net.corda.core.transactions.TransactionBuilder;
import net.corda.core.utilities.ProgressTracker;

import java.security.PublicKey;
import java.util.ArrayList;
import java.util.List;

@InitiatingFlow
@StartableByRPC
public class DoNothingFlow extends FlowLogic<Void> {

    private final String[] args;
    private Party notary;
    private List<Party> counterParties;

    private final ProgressTracker.Step doNothing;
    private final ProgressTracker progressTracker;

    @Override
    public ProgressTracker getProgressTracker() {
        return this.progressTracker;
    }

    public DoNothingFlow(final List<String> args,
                         final Party notaryConstructor,
                         final List<Party> counterPartiesConstructor) {

        if (notaryConstructor != null) {
            notary = notaryConstructor;
        }
        if (counterPartiesConstructor != null) {
            counterParties = counterPartiesConstructor;
        }

        this.args = args.toArray(new String[0]);

        String signature = this.args[0];

        doNothing = new ProgressTracker.Step("doNothing " + signature);
        progressTracker = new ProgressTracker(doNothing);
    }

    @Suspendable
    private void doNothing() throws FlowException {

        TransactionBuilder txBuilder = new TransactionBuilder(notary);

        DoNothingState outputState = new DoNothingState(getOurIdentity(), counterParties);
        txBuilder.addOutputState(outputState);
        List<PublicKey> requiredSigners = new ArrayList<>();
        counterParties.forEach(party -> requiredSigners.add(party.getOwningKey()));
        Command<DoNothingContract.Nothing> command = new Command<>(new DoNothingContract.Nothing(), requiredSigners);
        txBuilder.addCommand(command);

        SignedTransaction signedTx = getServiceHub().signInitialTransaction(txBuilder);
        List<FlowSession> sessionList = new ArrayList<>();
        counterParties.forEach(party -> sessionList.add(initiateFlow(party)));

        SignedTransaction fullySignedTx;
        try {
            fullySignedTx = subFlow(new CollectSignaturesFlow(
                    signedTx, sessionList, CollectSignaturesFlow.tracker()));
            subFlow(new FinalityFlow(fullySignedTx, sessionList));
        } catch (FlowException ex) {
            getLogger().error("Error while handling flow " + ex.getMessage());
            throw new FlowException("Error while handling flow " + this.getRunId() + " " + ex.getMessage());
        }

        progressTracker.setCurrentStep(doNothing);
    }

    @Suspendable
    @Override
    public Void call() throws FlowException {
        doNothing();
        return null;
    }
}