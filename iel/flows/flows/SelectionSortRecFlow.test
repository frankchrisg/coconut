package com.template.flows;

import co.paralleluniverse.fibers.Suspendable;
import com.template.contracts.SelectionSortRecContract;
import com.template.states.SelectionSortRecState;
import net.corda.core.contracts.Command;
import net.corda.core.flows.*;
import net.corda.core.identity.Party;
import net.corda.core.transactions.SignedTransaction;
import net.corda.core.transactions.TransactionBuilder;
import net.corda.core.utilities.ProgressTracker;

import java.security.PublicKey;
import java.util.ArrayList;
import java.util.List;

@InitiatingFlow
@StartableByRPC
public class SelectionSortRecFlow extends FlowLogic<Void> {

    private final String[] args;
    private final String function;
    private Party notary;
    private List<Party> counterParties;

    private final ProgressTracker.Step sort;
    private final ProgressTracker progressTracker;

    @Override
    public ProgressTracker getProgressTracker() {
        return this.progressTracker;
    }

    public SelectionSortRecFlow(final String functionConstructor, final List<String> args,
                                final Party notaryConstructor,
                                final List<Party> counterPartiesConstructor) {

        if (notaryConstructor != null) {
            notary = notaryConstructor;
        }
        if (counterPartiesConstructor != null) {
            counterParties = counterPartiesConstructor;
        }

        function = functionConstructor;

        this.args = args.toArray(new String[0]);

        String signature = this.args[this.args.length - 1];

        sort = new ProgressTracker.Step("sort/selectionSortRec " + signature);
        progressTracker = new ProgressTracker(sort);
    }

    @Suspendable
    private void selectionSortRec(int[] A, int l, int r) throws FlowException {

        if (l < r) {
            int q = max(A, l, l + 1, r);
            exchange(A, q, r);
            selectionSortRec(A, l, r - 1);
        }

    }

    private int max(int[] A, int q, int l, int r) {
        if (l <= r) {
            if (A[l] > A[q]) {
                return max(A, l, l + 1, r);
            } else {
                return max(A, q, l + 1, r);
            }
        } else {
            return q;
        }
    }

    private void exchange(final int[] A, final int q, final int i) {
        int tmp = A[q];
        A[q] = A[i];
        A[i] = tmp;
    }

    @Suspendable
    @Override
    public Void call() throws FlowException {
        if ("Sort".equals(function)) {

            if (args.length < 4) {
                throw new FlowException("Call to Sort must have at least 4 parameters");
            }

            int[] A = new int[args.length - 3];

            for (int i = 0; i < A.length; i++) {
                A[i] = Integer.parseInt(args[i]);
            }

            int l = Integer.parseInt(args[A.length]);
            int r = Integer.parseInt(args[A.length + 1]);

            selectionSortRec(A, l, r);

                    TransactionBuilder txBuilder = new TransactionBuilder(notary);

                    SelectionSortRecState outputState = new SelectionSortRecState(getOurIdentity(), counterParties);
                    txBuilder.addOutputState(outputState);
                    List<PublicKey> requiredSigners = new ArrayList<>();
                    counterParties.forEach(party -> requiredSigners.add(party.getOwningKey()));
                    Command<SelectionSortRecContract.Dummy> command = new Command<>(new SelectionSortRecContract.Dummy(), requiredSigners);
                    txBuilder.addCommand(command);

                    SignedTransaction signedTx = getServiceHub().signInitialTransaction(txBuilder);
                    List<FlowSession> sessionList = new ArrayList<>();
                    counterParties.forEach(party -> sessionList.add(initiateFlow(party)));

                    SignedTransaction fullySignedTx;
                    try {
                        fullySignedTx = subFlow(new CollectSignaturesFlow(
                                signedTx, sessionList, CollectSignaturesFlow.tracker()));
                        subFlow(new FinalityFlow(fullySignedTx, sessionList));
                    } catch (FlowException ex) {
                        getLogger().error("Error while handling flow " + ex.getMessage());
                        throw new FlowException("Error while handling flow " + this.getRunId() + " " + ex.getMessage());
                    }

                    progressTracker.setCurrentStep(sort);

            return null;
        }

        throw new FlowException("Not yet implemented function called");

    }
}