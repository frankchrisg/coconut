contract IO {

    mapping(string => bytes) store;

    bytes constant chars = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";

    event eventData(string eventData, string signature);

    function write(uint size, uint startKey, uint retLen, string memory signature) public {
        bytes memory states;
        for (uint i = 0; i < size; i++) {
            string memory sK = uintToStr(startKey + i);
            bytes memory val = getVal(startKey + i, retLen);
            set(sK, getVal(startKey + i, retLen));
            states = abi.encodePacked(states, val);
        }
        emit eventData("storage/write", signature);
    }

    function getVal(uint k, uint retLength) internal pure returns (bytes memory ret) {
        ret = new bytes(retLength);
        for (uint i = 0; i < retLength; i++) {
            ret[i] = chars[(k + i) % chars.length];
        }
        return ret;
    }

    function get(string memory key) public view returns (bytes memory) {
        return store[key];
    }

    function set(string memory key, bytes memory value) public {
        store[key] = value;
    }

    function uintToStr(uint number) internal pure returns (string memory uintAsString) {
        if (number == 0) {
            return "0";
        }
        uint j = number;
        uint len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory str = new bytes(len);
        uint k = len - 1;
        while (number != 0) {
            str[k--] = byte(uint8(48 + number % 10));
            number /= 10;
        }
        return string(str);
    }

    function scan(uint size, uint startKey, string memory signature) public {
        bytes memory states;
        for (uint i = 0; i < size; i++) {
            string memory sK = uintToStr(startKey + i);
            bytes memory val = get(sK);

            if (compareStrings(string(val), "")) {
                return;
            }

            states = abi.encodePacked(states, val);
        }
        emit eventData("storage/scan", signature);
    }

    function revertScan(uint size, uint startKey, string memory signature) public {
        bytes memory states;
        for (uint i = 0; i < size; i++) {
            string memory sK = uintToStr(startKey + size - i - 1);
            bytes memory val = get(sK);

            if (compareStrings(string(val), "")) {
                return;
            }

            states = abi.encodePacked(states, val);
        }
        emit eventData("storage/revertScan", signature);
    }

    function uintToBytes(uint k) public pure returns (bytes8 b) {
        bytes memory y = new bytes(8);
        assembly {mstore(add(y, 8), k)}
    }

    function getKey(uint k) internal pure returns (bytes32) {
        return uintToBytes(k);
    }

    function compareStrings(string memory a, string memory b) public pure
    returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));
    }

}

// 

// [{"anonymous":false,"name":"eventData","inputs":[{"indexed":false,"name":"eventData","type":"string","internalType":"string"},{"indexed":false,"name":"signature","type":"string","internalType":"string"}],"type":"event","payable":false},{"constant":true,"name":"compareStrings","inputs":[{"name":"a","type":"string","internalType":"string"},{"name":"b","type":"string","internalType":"string"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"type":"function","payable":false,"stateMutability":"pure"},{"constant":true,"name":"get","inputs":[{"name":"key","type":"string","internalType":"string"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"type":"function","payable":false,"stateMutability":"view"},{"constant":false,"name":"revertScan","inputs":[{"name":"size","type":"uint256","internalType":"uint256"},{"name":"startKey","type":"uint256","internalType":"uint256"},{"name":"signature","type":"string","internalType":"string"}],"outputs":[],"type":"function","payable":false,"stateMutability":"nonpayable"},{"constant":false,"name":"scan","inputs":[{"name":"size","type":"uint256","internalType":"uint256"},{"name":"startKey","type":"uint256","internalType":"uint256"},{"name":"signature","type":"string","internalType":"string"}],"outputs":[],"type":"function","payable":false,"stateMutability":"nonpayable"},{"constant":false,"name":"set","inputs":[{"name":"key","type":"string","internalType":"string"},{"name":"value","type":"bytes","internalType":"bytes"}],"outputs":[],"type":"function","payable":false,"stateMutability":"nonpayable"},{"constant":true,"name":"uintToBytes","inputs":[{"name":"k","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"b","type":"bytes8","internalType":"bytes8"}],"type":"function","payable":false,"stateMutability":"pure"},{"constant":false,"name":"write","inputs":[{"name":"size","type":"uint256","internalType":"uint256"},{"name":"startKey","type":"uint256","internalType":"uint256"},{"name":"retLen","type":"uint256","internalType":"uint256"},{"name":"signature","type":"string","internalType":"string"}],"outputs":[],"type":"function","payable":false,"stateMutability":"nonpayable"}]